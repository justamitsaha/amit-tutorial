{
    "content": {
        "pageHeader": "File",
        "topicList": [
            {
                "topicHeader": "I/O Stream",
                "topicMsgList": [
                    {
                        "topicText": "The contents of a file may be accessed or written via a stream, which is a list of data elements presented sequentially. Streams should be conceptually thought of as a long, nearly never‐ending “stream of water” with data presented one “wave” at a time. The stream is so large that once we start reading it, we have no idea where the beginning or the end is. We just have a pointer to our current position in the stream and read data one block at a time."
                    },
                    {
                        "topicText": "Each type of stream segments data into a “wave” or “block” in a particular way. For example, some stream classes read or write data as individual bytes. Other stream classes read or write individual characters or strings of characters and  some stream classes read or write larger groups of bytes or characters at a time. Although the java.io API is full of streams that handle characters, strings, groups of bytes, and so on, nearly all are built on top of reading or writing an individual byte or an array of bytes at a time. The reason higher-level streams exist is for convenience, as well as performance. For example, writing a file one byte at a time is time-consuming and slow in practice because the round-trip between the Java application and the file system is relatively expensive. By utilizing a BufferedOutputStream, the Java application can write a large chunk of bytes at a time, reducing the round-trips and drastically improving performance."
                    }
                ]
            },
            {
                "topicHeader": "Stream types",
                "topicMsgList": [
                    {
                        "topicText": "The java.io API defines two sets of stream classes for reading and writing streams: byte streams and character streams"
                    },
                    {
                        "topicText": "<b>Byte Stream</b> :Byte streams read/write binary data ( 0s and 1s) and have class names that end in InputStream or OutputStream."
                    },
                    {
                        "topicText": "<b>Character Stream</b> :Character streams read/write text data and have class names that end in Reader or Writer."
                    },
                    {
                        "topicText": "The API frequently includes similar classes for both byte and character streams, such as FileInputStream and FileReader. The difference between the two classes is based on how the bytes of the stream are read or written"
                    },
                    {
                        "topicText": "It is important to remember that even though character streams do not contain the word Stream in their class name, they are still I/O streams. The use of Reader/ Writer in the name is just to distinguish them from byte streams"
                    },
                    {
                        "topicText": "The byte streams are primarily used to work with binary data, such as an image or executable file, while character streams are used to work with text files. Since the byte stream classes can write all types of binary data, including strings, it follows that the character stream classes aren't strictly necessary. There are advantages, though, to using the character stream classes, as they are specifically focused on managing character and string data. For example, you can use a Writer class to output a String value to a file without necessarily having to worry about the underlying character encoding of the file. The character encoding determines how characters are encoded and stored in bytes in a stream and later read back or decoded as characters. Although this may sound simple, Java supports a wide variety of character encodings, ranging from ones that may use one byte for Latin characters, UTF‐8 and ASCII for example, to using two or more bytes per character, such as UTF-16."
                    },
                    {
                        "topicText": "In Java, the character encoding can be specified using the Charset class by passing a name value to the static Charset.forName() method, such as in the following examples:",
                        "cardCodeList": [
                            {
                                "code": "Charset usAsciiCharset = Charset.forName(&quot;US-ASCII&quot;);"
                            },
                            {
                                "code": "Charset utf8Charset = Charset.forName(&quot;UTF-8&quot;);"
                            },
                            {
                                "code": "Charset utf16Charset = Charset.forName(&quot;UTF-16&quot;);"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}