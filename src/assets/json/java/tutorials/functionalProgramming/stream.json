{
    "content": {
        "pageHeader": "Stream",
        "topicList": [
            {
                "topicHeader": "Stream",
                "topicMsgList": [
                    {
                        "topicText": "A stream in Java is a sequence of data. A stream pipeline consists of the operations that run on a stream to produce a result. There are three parts to a stream pipeline"
                    },
                    {
                        "topicText": "<b>Source:</b>Where the stream comes from"
                    },
                    {
                        "topicText": "<b>Intermediate operations:</b> Transforms the stream into another one. There can be as few or as many intermediate operations as you'd like. Since streams use lazy evaluation, the intermediate operations do not run until the terminal operation runs."
                    },
                    {
                        "topicText": "<b>Terminal operation: </b>Actually produces a result. Since streams can be  used only once, the stream is no longer valid after a terminal operation completes."
                    },
                    {
                        "topicText": "With out Lambda we have to go for either Initializing the interface or Inner class implementation. But both have draw backs that they create extra class files which can bloat the footprint of application",
                        "cardCodeList": [
                            {
                                "img": "/assets/json/java/tutorials/functionalProgramming/streamPipeline.png"
                            }
                        ]
                    },
                    {
                        "topicText": "Creating Stream",
                        "cardCodeList": [
                            {
                                "code": "Stream&lt;String&gt; empty = Stream.empty();",
                                "textDesc": "Empty Stream"
                            },
                            {
                                "code": "Stream&lt;Integer&gt; singleElement = Stream.of(1);<br /> Stream&lt;Integer&gt; fromArray = Stream.of(1, 2, 3);",
                                "textDesc": "Stream from elements"
                            },
                            {
                                "code": "var list = List.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);<br /> Stream&lt;String&gt; fromList = list.stream();",
                                "textDesc": "Stream from collections"
                            }
                        ]
                    },
                    {
                        "topicText": "Stream class provides generate method which takes a Supplier as input to create infinite stream",
                        "cardCodeList": [
                            {
                                "code": "Random rd = new Random();<br />Stream&lt;Integer&gt; intStream = Stream.generate(rd::nextInt);<br /> intStream.limit(5).forEach(System.out::println);",
                                "textDesc": "Infinite streams which generates Random Integer with Supplier"
                            },
                            {
                                "code": "Stream&lt;Double&gt; doubleStream = Stream.generate(Math::random);<br />doubleStream.limit(5).forEach(System.out::println);",
                                "textDesc": "Infinite streams which generates Random Double with Supplier"
                            },
                            {
                                "code": "Stream&lt;String&gt; stringStream = Stream.generate(() -&gt; &quot;YO&quot;);<br />stringStream.limit(5).forEach(System.out::println);",
                                "textDesc": "Infinite Stream of String &quot;YO&quot"
                            }
                        ]
                    },
                    {
                        "topicText": "Stream also provides iterate method to create stream. It takes in a seed which is initial value and an unary operator to generate next values. This generates an infinite stream. ",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;intStream = Stream.iterate(1, s -&gt; s + 1);<br /> &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;intStream.limit(5).forEach(System.out::println);"
                            }
                        ]
                    },
                    {
                        "topicText": "There ia another overloaded version of iterate which takes a seed, an unary operator and a predicate to determine condition, This was introduced in Java 9 and the predicate can be used to make the stream finite. When the predicate returns false the stream stops",
                        "cardCodeList": [
                            {
                                "code": "intStream = Stream.iterate(0, s -&gt; s &lt; 20, s -&gt; s + 1);<br /> intStream.forEach(System.out::println);",
                                "textDesc": "Finite stream which stops when values reaches 19 "
                            }
                        ]
                    }
                ]
            }
        ]
    }
}