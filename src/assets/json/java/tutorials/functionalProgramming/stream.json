{
    "content": {
        "pageHeader": "Stream",
        "topicList": [
            {
                "topicHeader": "Stream",
                "topicMsgList": [
                    {
                        "topicText": "A stream in Java is a sequence of data. A stream pipeline consists of the operations that run on a stream to produce a result. There are three parts to a stream pipeline"
                    },
                    {
                        "topicText": "<b>Source:</b>Where the stream comes from"
                    },
                    {
                        "topicText": "<b>Intermediate operations:</b> Transforms the stream into another one. There can be as few or as many intermediate operations as you'd like. Since streams use lazy evaluation, the intermediate operations do not run until the terminal operation runs."
                    },
                    {
                        "topicText": "<b>Terminal operation: </b>Actually produces a result. Since streams can be  used only once, the stream is no longer valid after a terminal operation completes."
                    },
                    {
                        "topicText": "With out Lambda we have to go for either Initializing the interface or Inner class implementation. But both have draw backs that they create extra class files which can bloat the footprint of application",
                        "cardCodeList": [
                            {
                                "img": "/assets/json/java/tutorials/functionalProgramming/streamPipeline.png"
                            }
                        ]
                    },
                    {
                        "topicText": "Creating Stream",
                        "cardCodeList": [
                            {
                                "code": "Stream&lt;String&gt; empty = Stream.empty();",
                                "textDesc": "Empty Stream"
                            },
                            {
                                "code": "Stream&lt;Integer&gt; singleElement = Stream.of(1);<br /> Stream&lt;Integer&gt; fromArray = Stream.of(1, 2, 3);",
                                "textDesc": "Stream from elements"
                            },
                            {
                                "code": "var list = List.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);<br /> Stream&lt;String&gt; fromList = list.stream();",
                                "textDesc": "Stream from collections"
                            }
                        ]
                    },
                    {
                        "topicText": "Creating infinite stream",
                        "cardCodeList": [
                            {
                                "code": "Stream&lt;Double&gt; randoms = Stream.generate(Math::random);",
                                "textDesc": "Infinite streams"
                            },
                            {
                                "code": "Stream&lt;Integer&gt; oddNumbers = Stream.iterate(1, n -&gt; n + 2);<br /> Stream.generate(() -&gt; &quot;Elsa&quot;);<br />Stream&lt;Integer&gt; oddNumberUnder100 = Stream.iterate(1, n -&gt; n &lt; 100, n -&gt; n + 2);",
                                "textDesc": "Infinite streams using iterate"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}