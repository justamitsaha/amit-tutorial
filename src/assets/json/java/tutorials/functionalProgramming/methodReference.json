{
    "content": {
        "pageHeader": "Method Reference",
        "topicList": [
            {
                "topicHeader": "Method Reference",
                "topicMsgList": [
                    {
                        "topicText": "Method reference is used to refer method of functional interface. It is compact and easy form of lambda expression. <b>When we simply pass the parameters of Lambda expression to functional interface implementation we can instead use Method reference instead of Lambda which looks much cleaner.</b> You can pretend the compiler turns your method references into lambdas for you. ",
                        "cardCodeList": [
                            {
                                "code": "TestClass obj= (text) -&gt; System.out.println(text);<br /> obj.testMethod(&quot;Dummy Text&quot;);",
                                "textDesc": "Lambda implementation"
                            },
                            {
                                "code": "TestClass obj= System.out::println;<br /> obj.testMethod(&quot;Dummy Text&quot;);",
                                "textDesc": "Method Reference implementation"
                            }
                        ]
                    },
                    {
                        "topicText": "There are four formats for usage of method references, depending on where we are using it."
                    },
                    {
                        "topicText": "<b> 1 CALLING STATIC METHODS </b> : Collection.sort(lst) becomes Collection::sort",
                        "cardCodeList": [
                            {
                                "code": "Consumer&lt;List&lt;Integer&gt;&gt; methodRef = Collections::sort;<br />methodRef.accept(lst);"
                            },
                            {
                                "code": "Consumer&lt;List&lt;Integer&gt;&gt; lambda = s-&gt; Collections.sort(s);<br /> lambda.accept(lst);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b> 2 CALLING INSTANCE METHODS ON OBJECT AND PASSING A PARAM</b>: str.startsWith(&quot;a&quot;) becomes str::startsWith(&quot;a&quot;)",
                        "cardCodeList": [
                            {
                                "code": "var str = &quot;abc&quot;;<br /> Predicate&lt;String&gt; methodRef = str::startsWith;<br /> methodRef.test(&quot;a&quot;);"
                            },
                            {
                                "code": "var str = &quot;abc&quot;;<br /> Predicate&lt;String&gt; lambda = s -&gt; str.startsWith(s);<br /> lambda.test(&quot;a&quot;);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b> 2 CALLING INSTANCE METHODS ON OBJECT </b>: str.isEmpty()",
                        "cardCodeList": [
                            {
                                "code": "Predicate&lt;String&gt; methodRef = String::isEmpty;<br />methodRef.test(&quot;Yo&quot;);"
                            },
                            {
                                "code": "Predicate&lt;String&gt; lambda = s -&gt; s.isEmpty();<br />lambda.test(&quot;Yo&quot;);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b> CALLING CONSTRUCTORS </b>",
                        "cardCodeList": [
                            {
                                "code": "Supplier &lt;List&lt;String&gt;&gt; methodRef4 = ArrayList::new;<br /> methodRef4.get();"
                            },
                            {
                                "code": "Supplier&lt;List&lt;String&gt;&gt; lambda4= () -&gt; new ArrayList();<br /> lambda4.get();"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}