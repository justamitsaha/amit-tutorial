{
    "content": {
        "pageHeader": "Lambdas Basic",
        "topicList": [
            {
                "topicHeader": "What is Lambdas?",
                "topicMsgList": [
                    {
                        "topicText": "A lambda expression is a short block of code can which takes in parameters and can returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method. For a Lambda we need a functional interface and we can override the functional interface in the Lambda code itself with out the need of creating a implementation of Functional interface or writing an inner class implementation ",
                        "cardCodeList": [
                            {
                                "code": "public class Test {<br />&nbsp;&nbsp;public static void main(String[] args) {<br /> &nbsp;&nbsp; &nbsp;Shout sh = () -&gt; System.out.println(&quot;Lambda&quot;);<br /> &nbsp;&nbsp; &nbsp;sh.shout();<br />&nbsp;&nbsp;}<br /> }<br /> <br /> @FunctionalInterface<br /> interface Shout { void shout(); }",
                                "textDesc": "Lambda implementation"
                            },
                            {
                                "img": "/assets/json/java/tutorials/functionalProgramming/Lambda.png"
                            }
                        ]
                    },
                    {
                        "topicText": "With out Lambda we have to go for either Initializing the interface or Inner class implementation. But both have draw backs that they create extra class files which can bloat the footprint of application",
                        "cardCodeList": [
                            {
                                "code": "public class Test {<br /> &nbsp;&nbsp;public static void main(String[] args) {<br /> &nbsp;&nbsp; &nbsp;ShoutImpl sh = new ShoutImpl();<br /> &nbsp;&nbsp; &nbsp;sh.shout();<br /> &nbsp;&nbsp;}<br /> }<br /> <br /> @FunctionalInterface<br /> interface Shout { void shout(); }<br /> <br /> class ShoutImpl implements Shout {<br /> &nbsp;&nbsp;@Override<br /> &nbsp;&nbsp;public void shout() { System.out.println(&quot;Interface&quot;); &nbsp;}<br /> }",
                                "textDesc": "Implementing the interface."
                            },
                            {
                                "img": "/assets/json/java/tutorials/functionalProgramming/InterfaceImpl.png",
                                "textDesc": "Implementing the interface extra class created."
                            }
                        ]
                    },
                    {
                        "topicText": "In Inner class we are not creating implementation but the inner class still creates Anonymous class.",
                        "cardCodeList": [
                            {
                                "code": "public class Test {<br /> &nbsp;&nbsp;public static void main(String[] args) {<br /> &nbsp;&nbsp; &nbsp;Shout shoutInnerClass = new Shout() {<br /> &nbsp;&nbsp; &nbsp; &nbsp;public void shout() { System.out.println(&quot;Inner Class&quot;); }<br /> &nbsp;&nbsp; &nbsp;};<br /> &nbsp;&nbsp; &nbsp;shoutInnerClass.shout();<br /> &nbsp;&nbsp;}<br /> }<br /> <br /> @FunctionalInterface<br /> interface Shout { void shout(); }",
                                "textDesc": " Inner class implementation"
                            },
                            {
                                "img": "/assets/json/java/tutorials/functionalProgramming/InnerClass.png",
                                "textDesc": " Anonymous class created adding overhead to application."
                            }
                        ]
                    },
                    {
                        "topicText": " A Lambda expression always needs a functional interface method to execute"
                    },
                    {
                        "topicText": " It is a good practice to keep one or two line of code in Lambda expression."
                    }
                ]
            }
        ]
    }
}