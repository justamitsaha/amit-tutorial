{
    "content": {
        "pageHeader": "Stream",
        "topicList": [
            {
                "topicHeader": "Stream Intermediate Operations",
                "topicMsgList": [
                    {
                        "topicText": "Unlike a terminal operation, an intermediate operation produces a stream as its result. An intermediate operation can also deal with  an infinite stream simply by returning another infinite stream"
                    },
                    {
                        "topicText": "<b>1 filter() : </b> The filter() method returns a Stream with elements that match a given expression. Here is the method signature: Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; stream = Stream.of(&quot;monkey&quot;, &quot;gorilla&quot;, &quot;bonobo&quot;);<br /> &nbsp;&nbsp; &nbsp;stream.filter(x -&gt; x.startsWith(&quot;m&quot;)).forEach(System.out::print);//monkey"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>2 distinct() : </b>The distinct() method returns a stream with duplicate values removed. Java calls equals() to determine whether the objects are the same",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; s = Stream.of(&quot;duck&quot;, &quot;duck&quot;, &quot;duck&quot;, &quot;goose&quot;);<br /> &nbsp;&nbsp; &nbsp;s.distinct().forEach(System.out::print);//duckgoose"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>3 limit() and skip() :</b> The limit() and skip() methods can make a Stream smaller, or they could make a finite stream out of an infinite stream",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;Integer&gt; s2 = Stream.iterate(1, n -&gt; n + 1);<br /> &nbsp;&nbsp; &nbsp;s2.skip(5).limit(2).forEach(System.out::print);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>4 map() :</b> The map() method creates a one‐to‐one mapping from the elements in the stream to the elements of the next step in the stream. &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)<br />",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; s3 = Stream.of(&quot;monkey&quot;, &quot;gorilla&quot;, &quot;bonobo&quot;);<br /> &nbsp;&nbsp; &nbsp;s3.map(String::length).forEach(System.out::print);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>5 flatMap() :</b> The flatMap() method takes each element in the stream and makes any elements it contains top‐level elements in a single stream. This is helpful when you want to remove empty elements from a stream or you want to combine a stream of lists.",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;List&lt;String&gt; zero = List.of();<br /> &nbsp;&nbsp; &nbsp;var one = List.of(&quot;Bonobo&quot;);<br /> &nbsp;&nbsp; &nbsp;var two = List.of(&quot;Mama Gorilla&quot;, &quot;Baby Gorilla&quot;);<br /> &nbsp;&nbsp; &nbsp;Stream&lt;List&lt;String&gt;&gt; animals = Stream.of(zero, one, two);<br /> &nbsp;&nbsp; &nbsp;animals.flatMap(m -&gt; m.stream()).forEach(System.out::println);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>6 sorted() :</b> The sorted() method returns a stream with the elements sorted. Java uses natural ordering unless we specify a comparator.",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; stream2 = Stream.of(&quot;brown-&quot;, &quot;bear-&quot;);<br /> &nbsp;&nbsp; &nbsp;stream2.sorted().forEach(System.out::print); // bear-brown"
                            },
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; stream3 = Stream.of(&quot;brown bear-&quot;, &quot;grizzly-&quot;);<br /> &nbsp;&nbsp; &nbsp;stream3.sorted(Comparator.reverseOrder()).forEach(System.out::print); // grizzly-brown bear"
                            }
                        ]
                    },
                    {
                        "topicText": "Take a look at the method signatures again. Comparator is a functional interface. This means that we can use method references or lambdas to implement it. The Comparator interface implements one method that takes two String parameters and returns an int. However, Comparator::reverseOrder doesn't do that. It is a reference to a function that takes zero parameters and returns a Comparator. This is not compatible with the interface. This means that we have to use a method and not a method reference",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;stream3.sorted(Comparator::reverseOrder);<br />"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>7 peek() :</b> It is useful for debugging because it allows us to perform a stream operation without actually changing the stream. Signature <br> Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action) </br>. peek() operation takes the same argument as the terminal forEach() operation Think of peek() as an intermediate version of forEach() that returns the original stream back to you.",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; stream2 = Stream.of(&quot;brown-&quot;, &quot;bear-&quot;);<br /> &nbsp;&nbsp; &nbsp;stream2.sorted().forEach(System.out::print); // bear-brown"
                            },
                            {
                                "code": "&nbsp;&nbsp; &nbsp;Stream&lt;String&gt; stream3 = Stream.of(&quot;brown bear-&quot;, &quot;grizzly-&quot;);<br /> &nbsp;&nbsp; &nbsp;stream3.sorted(Comparator.reverseOrder()).forEach(System.out::print); // grizzly-brown bear"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}