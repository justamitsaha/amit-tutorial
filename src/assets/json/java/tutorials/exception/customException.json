{
    "content": {
        "pageHeader": "Custom Exception",
        "topicList": [
            {
                "topicHeader": "Override Exception",
                "topicMsgList": [
                    {
                        "topicText": "A method overriding a super class must declare fewer exception than parent class or interface. This is applicable for checked exception not for unchecked exception",
                        "cardCodeList": [
                            {
                                "code": "class CanNotHopException extends Exception {<br />}<br />&nbsp;<br />class Hopper {<br />&nbsp;&nbsp; &nbsp;public void hop() {<br />&nbsp;&nbsp; &nbsp;}<br />}<br /><br />class Bunny extends Hopper {<br />&nbsp;&nbsp;public void hop() throws CanNotHopException {<br /> &nbsp;&nbsp;}<br />}",
                                "textDesc": "parent method does not throw CanNotHopException  hence child can't"
                            },
                            {
                                "code": "class CanJumpException extends RuntimeException {<br />}<br />&nbsp;<br />class Jump {<br />&nbsp;&nbsp; &nbsp;public void jump() {<br />&nbsp;&nbsp; &nbsp;}<br />}<br />&nbsp;<br />class Horse extends Jump {<br />&nbsp;&nbsp; &nbsp;public void jump() throws CanJumpException {<br />&nbsp;&nbsp; &nbsp;}<br />}",
                                "textDesc": "This will compile since the exception is Runtime exception"
                            },
                            {
                                "code": "class CanJumpException extends FileNotFoundException {<br />}<br />&nbsp;<br />class Jump {<br />&nbsp;&nbsp; &nbsp;public void jump() throws IOException {<br />&nbsp;&nbsp; &nbsp;}<br />}<br />&nbsp;<br />class Horse extends Jump {<br />&nbsp;&nbsp; &nbsp;public void jump() throws CanJumpException {<br />&nbsp;&nbsp; &nbsp;}<br />}",
                                "textDesc": "Here parent throws  super class of exception thrown by child so compile"
                            }
                        ]
                    },
                    {
                        "topicText": "When a class extends an exception call it can be used for custom exception",
                        "cardCodeList": [
                            {
                                "code": "class CannotSwimException extends Exception {<br /><br />&nbsp;&nbsp; &nbsp;private static final long serialVersionUID = 1L;<br /><br />&nbsp;&nbsp; &nbsp;public CannotSwimException() {<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;super();<br />&nbsp;&nbsp; &nbsp;}<br /><br />&nbsp;&nbsp; &nbsp;public CannotSwimException(Exception e) {<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;super(e);<br />&nbsp;&nbsp; &nbsp;}<br /><br />&nbsp;&nbsp; &nbsp;public CannotSwimException(String message) {<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;super(message);<br />&nbsp;&nbsp; &nbsp;}<br />}<br /><br />throw new CannotSwimException(new FileNotFoundException(&quot;Cannot find shark file&quot;));",
                                "textDesc": "Exception class has 3 types of constructors all have been overridden"
                            },
                            {
                                "code": "throw new CustomException();<br /><br />class CustomException extends NullPointerException{<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;public CustomException(String message) {<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;super(message);<br />&nbsp;&nbsp; &nbsp;}<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;public CustomException() {<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;super();<br />&nbsp;&nbsp; &nbsp;}<br />}<br />",
                                "textDesc": "NullPointerException class has 2 types of constructors all have been overridden"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}