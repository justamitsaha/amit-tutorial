{
    "content": {
        "pageHeader": "Functional Interface",
        "topicList": [
            {
                "topicHeader": "Functional Interface",
                "topicMsgList": [
                    {
                        "topicText": "Java provides some out of the box Functional Interface which can be reused. Mentioned below."
                    },
                    {
                        "topicText": "<b>1 Supplier&lt;T&gt;</b> : Returns an object and has no input. Has abstract method <b>&lt;T&gt; get()</b>. A Supplier is used when you want to generate or supply values without taking any input, like creating objects.",
                        "cardCodeList": [
                            {
                                "code": "Supplier&lt;LocalDate&gt; s1 = LocalDate::now;<br /> Supplier&lt;LocalDate&gt; s2 = () -&gt; LocalDate.now();<br /> LocalDate d1 = s1.get();<br /> LocalDate d2 = s2.get();<br /> System.out.println(d1 +&quot;&lt;---&gt;&quot;+d2);<br /> "
                            },
                            {
                                "code": "Supplier&lt;StringBuilder&gt; sb1 = StringBuilder::new;<br /> Supplier&lt;StringBuilder&gt; sb2 = () -&gt; new StringBuilder(&quot;hello&quot;);<br /> Supplier&lt;String&gt; su = () -&gt; Integer.toString(new Random().nextInt());<br /> String random = su.get();<br /> System.out.println(su + &quot; &lt;----&gt; &quot;+random);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>2 Consumer&lt;T&gt;</b> : Returns nothing and has 1 input. Has abstract method <b>accept(T)</b>,You use a Consumer when you want to do something with a parameter but not return anything",
                        "cardCodeList": [
                            {
                                "code": "Consumer&lt;String&gt; c1 = System.out::println;<br /> Consumer&lt;String&gt; c2 = x -&gt; System.out.println(x);<br /> c1.accept(&quot;Annie&quot;);<br /> c2.accept(&quot;Annie&quot;);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>3 BiConsumer&lt;T,U&gt;</b> : Returns nothing and has 2 input. Has abstract method <b>accept(T,U)</b>",
                        "cardCodeList": [
                            {
                                "code": "&nbsp;&nbsp; &nbsp;var map = new HashMap&lt;String, Integer&gt;();<br /> &nbsp;&nbsp; &nbsp;BiConsumer&lt;String, Integer&gt; b1 = map::put;<br /> &nbsp;&nbsp; &nbsp;BiConsumer&lt;String, Integer&gt; b2 = (k, v) -&gt; map.put(k, v);<br /> &nbsp;&nbsp; &nbsp;b1.accept(&quot;chicken&quot;, 7);<br /> &nbsp;&nbsp; &nbsp;b2.accept(&quot;chick&quot;, 1);<br /> &nbsp;&nbsp; &nbsp;System.out.println(map);"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>4 Predicate&lt;T&gt;</b> : Takes an input return boolean. Has abstract method <b> boolean test(T) </b>.",
                        "cardCodeList": [
                            {
                                "code": "Predicate&lt;String&gt; p1 = String::isEmpty;<br /> Predicate&lt;String&gt; p2 = x -&gt; x.isEmpty();<br /> System.out.println(p1.test(&quot;&quot;));<br /> System.out.println(p2.test(&quot;&quot;));"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>5 BiPredicate&lt;T,U&gt;</b> : Takes 2 input return boolean. Has abstract method <b> boolean test(T,U) </b>.",
                        "cardCodeList": [
                            {
                                "code": "BiPredicate&lt;String, String&gt; b1 = String::startsWith;<br /> BiPredicate&lt;String, String&gt; b2 = &nbsp;(string, prefix) -&gt; string.startsWith(prefix);<br /> System.out.println(b1.test(&quot;chicken&quot;, &quot;chick&quot;));&nbsp;<br /> System.out.println(b2.test(&quot;chicken&quot;, &quot;chick&quot;));"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>6 Function&lt;T,R&gt;</b> : Represents a function that accepts one argument and produces a result. Has abstract method <b>R apply(T) </b>. It can take an input of one type and return something different.",
                        "cardCodeList": [
                            {
                                "code": "Function&lt;String, Integer&gt; f1 = String::length;<br /> Function&lt;String, Integer&gt; f2 = x -&gt; x.length();<br /> System.out.println(f1.apply(&quot;cluck&quot;));<br /> System.out.println(f2.apply(&quot;cluck&quot;));"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>7 BiFunction&lt;U,T,R&gt;</b> : Represents a function that accepts two argument and produces a result. Has abstract method <b>R apply(U,T) </b>.",
                        "cardCodeList": [
                            {
                                "code": "BiFunction&lt;String, String, String&gt; b1 = String::concat;<br /> BiFunction&lt;String, String, String&gt; b2 = (string, toAdd) -&gt; string.concat(toAdd);<br /> System.out.println(b1.apply(&quot;baby &quot;, &quot;chick&quot;));<br /> System.out.println(b2.apply(&quot;baby &quot;, &quot;chick&quot;));"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>8 UnaryOperator&lt;T&gt;</b> : Represents a function that accepts an argument and produces a result of same type. Has abstract method <b>T apply(T) </b>. This extends <b>Function</b> but the difference is that the return type and arguments are of same type as compared to Function.",
                        "cardCodeList": [
                            {
                                "code": "UnaryOperator&lt;String&gt; u1 = String::toUpperCase;<br /> UnaryOperator&lt;String&gt; u2 = x -&gt; x.toUpperCase();<br /> System.out.println(u1.apply(&quot;chirp&quot;)); &nbsp;<br /> System.out.println(u2.apply(&quot;chirp&quot;)); &nbsp;"
                            }
                        ]
                    },
                    {
                        "topicText": "<b>9 BinaryOperator&lt;T&gt;</b> : Represents a function that accepts an argument and produces a result of same type. Has abstract method <b>T apply(T) </b>. This extends <b>BiFunction</b> but the difference is that the return type and arguments are of same type as compared to BiFunction",
                        "cardCodeList": [
                            {
                                "code": "BinaryOperator&lt;String&gt; b1 = String::concat;<br /> BinaryOperator&lt;String&gt; b2 = (firstString, secondString) -&gt; firstString.concat(secondString);<br /> System.out.println(b1.apply(&quot;baby &quot;, &quot;chick&quot;));<br /> System.out.println(b2.apply(&quot;baby &quot;, &quot;chick&quot;));"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}